///*------------------------------------*\
//    #MIXINS
//\*------------------------------------*/

// Spit out vendor prefixes in one go. Very pragmatic, far from perfect.
@mixin vendor($property, $value...) {
    -webkit-#{$property}: $value;
       -moz-#{$property}: $value;
            #{$property}: $value;
}

// Apply ‘attention’ styles in one go.
@mixin attention($self: false) {

    @if($self != false) {

        &,
        &:hover,
        &:active,
        &:focus {
            @content;
        }

    }

    @else {

        &:hover,
        &:active,
        &:focus {
            @content;
        }

    }

}

@mixin font-size($font-size, $line-height: auto) {
   font-size: $font-size;
   font-size: ($font-size / $base-font-size) * 1rem;

   @if $line-height == auto {
       line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
   }

   @else {

       @if (type-of($line-height) == number or $line-height == inherit or $line-height == normal) {
           line-height: $line-height;
       }

       @elseif ($line-height != none and $line-height != false) {
           @warn "D’oh! ‘#{$line-height}’ is not a valid value for `line-height`.";
       }

   }
}

// Generate Helvetica Neue’s numbered font-weights from their aliases.
@mixin font-weight($font-weight) {

    @if ($font-weight == "regular") {
        font-weight: 300;
    }

    @if ($font-weight == "bold") {
        font-weight: 600;
    }

}

// Create all specified heading styles in one go.
@mixin headings($from: 1, $to: 6) {

    %base-heading {
        @content;
    }

    @if $from >= 1 and $to <= 6{

        @for $i from $from through $to{

            h#{$i} {
                @extend %base-heading;
            }

        }

    }

}




// A simple mixin to quickly generate whole media queries from the aliases and
// conditions defined in `_settings.responsive.scss`.
//
// Usage:
//
// .foo {
//     color: green;
//
//     @include media-query(palm) {
//         color: red;
//     }
//
// }

@mixin media-query($mq) {

    $breakpoint-found: false;

    // Loop through the list of breakpoints we’ve provided in our settings file.
    @each $breakpoint in $breakpoints {

        // Grab the alias and the condition from their respective locations in
        // the list.
        $alias:     nth($breakpoint, 1);
        $condition: nth($breakpoint, 2);

        // If the media query we’ve specified has an alias and a condition...
        @if $mq == $alias and $condition {

            // ...tell the mixin that we’ve found it...
            $breakpoint-found: true;

            // ...and spit it out here.
            @media #{$condition} {
                @content;
            }

        }

    }

    // If the user specifies a non-exitent alias, send them a warning.
    @if $breakpoint-found == false{
        @warn "Oops! Breakpoint ‘#{$mq}’ does not exist."
    }

}